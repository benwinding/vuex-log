!function(o,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.vuexTrace=t():o.vuexTrace=t()}(window,(function(){return function(o){var t={};function n(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return o[e].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=o,n.c=t,n.d=function(o,t,e){n.o(o,t)||Object.defineProperty(o,t,{enumerable:!0,get:e})},n.r=function(o){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(o,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(o,"__esModule",{value:!0})},n.t=function(o,t){if(1&t&&(o=n(o)),8&t)return o;if(4&t&&"object"==typeof o&&o&&o.__esModule)return o;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:o}),2&t&&"string"!=typeof o)for(var r in o)n.d(e,r,function(t){return o[t]}.bind(null,r));return e},n.n=function(o){var t=o&&o.__esModule?function(){return o.default}:function(){return o};return n.d(t,"a",t),t},n.o=function(o,t){return Object.prototype.hasOwnProperty.call(o,t)},n.p="/dist/",n(n.s=0)}([function(o,t,n){"use strict";n.r(t),n.d(t,"actionLogger",(function(){return f})),n.d(t,"mutationLogger",(function(){return d}));var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o};function r(){return!!window.matchMedia&&!!window.matchMedia("(prefers-color-scheme: dark)").matches}function i(o,t){return o.filter(t)[0]}function u(o){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(null===o||"object"!==(void 0===o?"undefined":e(o)))return o;var n=i(t,(function(t){return t.original===o}));if(n)return n.copy;var r=Array.isArray(o)?[]:{};return t.push({original:o,copy:r}),Object.keys(o).forEach((function(n){r[n]=u(o[n],t)})),r}var c=function(){function o(o,t){for(var n=0;n<t.length;n++){var e=t[n];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(o,e.key,e)}}return function(t,n,e){return n&&o(t.prototype,n),e&&o(t,e),t}}();var a="color: #000; background: "+(r()?"#ddd":"#777")+";font-size:12pt;font-weight:normal;padding:2px 10px;border-radius:5px;",l=function(){function o(){!function(o,t){if(!(o instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o)}return c(o,[{key:"log",value:function(){for(var o=arguments.length,t=Array(o),n=0;n<o;n++)t[n]=arguments[n];var e,r,i=t||[],u=i.shift(),c=i.shift(),l=a;"string"==typeof u&&"string"==typeof c&&u.includes("%c")?(l+=c,(e=console).log.apply(e,[u,l].concat(t))):(r=console).log.apply(r,["%c%s",l,u,c].concat(i))}},{key:"groupCollapsed",value:function(){for(var o=arguments.length,t=Array(o),n=0;n<o;n++)t[n]=arguments[n];var e,r,i=t||[],u=i.shift(),c=i.shift(),l=a;"string"==typeof u&&"string"==typeof c&&u.includes("%c")?(l+=c,(e=console).groupCollapsed.apply(e,[u,l].concat(t))):(r=console).groupCollapsed.apply(r,["%c%s",l,u,c].concat(i))}},{key:"group",get:function(){return console.group.bind(console)}},{key:"groupEnd",get:function(){return console.groupEnd.bind(console)}}]),o}();function f(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=o.collapsed,n=void 0===t||t,e=o.filter,i=void 0===e?function(o,t,n){return!0}:e,c=o.transformer,a=void 0===c?function(o){return o}:c,f=o.logger,d=void 0===f?new l:f;return function(o){var t=u(o.state),e=r();o.subscribeAction((function(o,r){var c=o.type,l=o.payload;if(void 0!==d){var f=u(r);if(i(c,t,f)){var s=new Date,g=["%c"+("→ Action "+c+(" @ "+p(s.getHours(),2)+":"+p(s.getMinutes(),2)+":"+p(s.getSeconds(),2)+"."+p(s.getMilliseconds(),3))),"background: #aed581;"];try{n?d.groupCollapsed.apply(d,g):d.group.apply(d,g)}catch(o){var y;(y=console).log.apply(y,g)}var v="font-size:10pt; padding:1px 8px; background: "+(e?"#222":"#ddd")+";";d.log("%cpayload",v+"color: #333;",{payload:l}),d.log("%cstate",v+"color: #4CAF50;",{nextState:a(f)});try{d.groupEnd()}catch(o){d.log("—— log end ——")}}t=f}}))}}function p(o,t){return n="0",e=t-o.toString().length,new Array(e+1).join(n)+o;var n,e}function d(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=o.collapsed,n=void 0===t||t,e=o.filter,i=void 0===e?function(o,t,n){return!0}:e,c=o.transformer,a=void 0===c?function(o){return o}:c,f=o.mutationTransformer,p=void 0===f?function(o){return o}:f,d=o.logger,g=void 0===d?new l:d;return function(o){var t=u(o.state),e=r();o.subscribe((function(o,r){if(void 0!==g){var c=u(r);if(i(o,t,c)){var l=new Date,f=" @ "+s(l.getHours(),2)+":"+s(l.getMinutes(),2)+":"+s(l.getSeconds(),2)+"."+s(l.getMilliseconds(),3),d=p(o),y=["%c"+("↻ Mutation "+o.type+f),"background: #ffb74d;"];try{n?g.groupCollapsed.apply(g,y):g.group.apply(g,y)}catch(o){var v;(v=console).log.apply(v,y)}var b="font-size:10pt; padding:1px 8px; background: "+(e?"#222":"#ddd")+";";g.log("%cprev state",b+"color: #9E9E9E;",{prevState:a(t)}),g.log("%cmutation",b+"color: #03A9F4;",{formattedMutation:d}),g.log("%cnext state",b+"color: #4CAF50;",{nextState:a(c)});try{g.groupEnd()}catch(o){g.log("—— log end ——")}}t=c}}))}}function s(o,t){return n="0",e=t-o.toString().length,new Array(e+1).join(n)+o;var n,e}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,